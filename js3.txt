1.
변수만들때 let, const, var차이
let 재선언 금지, 재할당 가능
const 재선언 금지, 재할당 금지
var 재선언 가능, 재할당 가능

let a = b;
let a = c;
//재선언 금지

let a = b;
a = c;
//재할당은 가능

const a = b;
const a = c;
//재선언 금지

const a = b;
a = c;
//재할당 금지

var a = b;
var a = c;
a = d;
//재선언, 재할당 가능


const a = 5;
const b = 2;
let myName = "minje";

console.log(a + b);
console.log(a * b);
console.log(a / b);
console.log("hello "+ myName);

myName = "kangminje"
console.log("your new name is " + myName)

2.
undefined = 박스만 만들어 놓은 상태
null = 박스만들고 아무것도 안넣고 포장함

const amIFat = null;
let something;
console.log(something, amIFat)

3.
데이터를 나열하기 위한 방법 중 하나.
항상 [ ] 안에 콤마(,)로 데이터들을 나열한다. 변수도 쓰일 수 있고, boolean, text, 숫자 등 데이터 정렬이 가능하다.
ex) const daysOfWeek = ["mon", "tue", "wed", "thu", "fri", "sat", "sun"];

만약, 위의 변수에서 5번째 element 값을 알려주세요. 라고 한다면 어떻게 출력해야 할까?
ex) console.log(daysOfWeek[4]) 라고 해야 5번째 값을 출력할 수 있다.

왜?? 컴퓨터는 숫자를 0부터 세기 때문에, “mon”은 0번째라고 생각하면 된다.
JS의 주석처리는 //

위의 상태에서 daysOfWeek이란 변수에 하나의 값을 더 넣고 싶다면 다음과 같이한다.
ex) daysOfWeek.push(“holiday”) .push는 추가하는 기능.


const dayOfWeek = ["mon","tue","wed","thu","fri","sat","sun"];
console.log(dayOfWeek);
// Get item from Array
console.log(dayOfWeek[4])
// Add one more day to the array
dayOfWeek.push("six")
console.log(dayOfWeek)

4.
object는 property를 가진 데이터를 저장해주며, { } 를 사용한다.

const player = {
name : tomato,
color : red,
food : true,
};

console.log(player);

property를 불러오는 방법은 2가지가 있다.

1. console.log(player.name); => tomato
2. console.log(player["name"]); => tomato

또한 property를 바꾸는 것은 가능하지만 선언된 object를 바꾸는 것은 불가능하다.
ex)
const player = {
name : tomato,
color : red,
food : true,
};

console.log(player);
player.color = "blue";
console.log(player.color);
--> blue

그리고 property를 추가 할 수도 있다.

player.koreanName = "토마토";

--> {name: "tomato", color: "blue", food: true, koreaName: "토마토"}

const player =  {
    name: "minje",
    points: 10,
    fat: true,
};
console.log(player);
player.lastName = "potato";
player.points = 15;
console.log(player);

5.
player.points(); 라고 사용하지 않았다. player.points은 function이 아니기 때문. player.points은 숫자다.
player에게 function을 주기 전에, 어떻게 function을 만드는지를 배워야 한다.
function은 내가 계속 반복해서 사용할 수 있는 코드 조각이다. 어떤 코드를 캡슐화 해서 실행을 여러번 할 수 있게 해준다.

function 선언 :
function 함수명() {
실행코드
}

funtion 실행 : 함수명();
argument(인수)를 보내야 하는데 인수란 함수를 실행하는 동안 어떤 정보를 함수에게 보낼 수 있는 방법이다.

function sayHello(){
    console.log("Hello my name is C");
}

sayHello();

6.
펑션의 괄호 안의 매개변수에서 아규먼트를 받아들일 수 있다.
ex)
function sayHello(nameOfPerson) {
console.log(nameOfPerson);
}

sayHello("nico")
sayHello("dal")
sayHello("lynn") // nameOfPerson은 "nico" "dal" "lynn" 을 받았다고 생각하면 됨.


아규먼트는 하나만 받을 수 있는게 아니라 여러개를 받을 수 있음.
ex)
function sayHello(nameOfPerson , age) {
console.log(nameOfPerson);
}

sayHello("nico" , 12);
sayHello("dal" , 20);
sayHello("lynn" , 23); // sayHello function의 매개변수 2개는 아래 2개의 argument를 받는 중임.

function의 값은 function 안에서만 존재한다.

오브젝트 안에서 매개변수가 아규먼트를 받는 방식
ex)
const player = {
name : function(Name) {
console.log("Your Name is " + Name + " 입니다.")
} ,
sayHello : function(Age) {
console.log("Your age is " + Age + " 입니다." )
}
}

player.sayHello(14)
player.name("james")

function plus(a, b){
    console.log(a+b)
}
function divide(a,b){
    console.log(a / b);
}
plus(8, 60);
divide(98, 20)

const player = {
    name: "nico",
    sayHello:function(otherPersonsName){
        console.log("hello " + otherPersonsName + " nice to meet you" )
    },
};

player.sayHello("nico")
player.sayHello("lynn")

7.
function안에서 return과 추가작업을 입력하면

return만 작업하고 추가 수행은 이뤄지지 않는다.

만약 return 앞에 기타작업이 있다면 이 작업은 수행된다.

즉, return"까지만" 수행된다!

return을 쓸 때의 주의사항
한번 return을 하면 해당 함수는 끝난다!
그렇기 때문에 return뒤에 작업을 한다면 출력되지 않는다!
(＃return 앞에 작업을 한다면 출력된다)

return은 말 자체로 다시 돌려준다라는 의미로
해당 함수의 변수값을 지정해주면 해당code를 안에서 실행해서
그 결과값을 해당 함수의 변수값을 선언한 변수한테 돌려주는것이다.

8.
prompt();라는 함수는 사용자에게 창을 띄어 값을 받음.
prompt();를 사용하면 답을 할때까지 코드의 실행을 멈추고, 매우 오래된 방법임. 별로 안이쁨. css로 바꾸지도 못함.
const age = prompt("how old are you?");
console.log(typeof age);
typeof라는 키워드를 쓰면 type를 볼 수 있는데, prompt();에서 숫자를 입력해도 string이라고 뜬다. string이 디폴트이기 때문이다.

한 type로 받아서 다른 type로 바꾸는 작업을 해야한다. "15"-->15
string-->number로 변환해주는 함수 parseInt();
console.log(typeof "15", typeof parseInt("15")); --> string number
이렇게 숫자로 변환이 되야 비교를 할 수 있다.
참고로 "숫자"가 아닌게 입력되면 변환이 안됨. NaN(not a number)

const age = parseInt(prompt("how old are you?"));
console.log(age);

9.
isNaN 은 무언가가 NaN인지 판별하는 방법
const age= parseInt(prompt (“How old are you?”));
console.log(isNaN(age));
숫자입력하면 false
글자입력하면 ture

if(condition){
실행코드=true ---실행
실행코드=false ----다음 else 값 실행
} else{

}
condition은 boolean으로 판별가능해야 한다, (true , false)

if(isNaN(age)){
console.log(“please wirte a number”);
} else{
console.log(“Thank you for writing your age”);
}

10.
&& : and 즉 그리고의 의미로 좌항과 우항이 모두 true여야 true를 반환, 두 항 중 하나라도 false면 false값을 반환
 || : also 즉 또는의 의미로 좌항과 우항 중 하나라도 true이면 true를 반환, 두 항 모두 false일때 false를 출력
 = : 작거나 같다 그리고 크거나 같다는 꺽쇠가 먼저오고 =이 와야함
 좌우가 같다는 연산은 ===또는 ==이다.

const age = parseInt( prompt("How old are you"))

true || true === true
false || true === true
true || false === true
false || false === false


true && true === true
false && true === false
true && false === false
false && false === false

if(isNaN(age) || age < 0){
    console.log("Plese write a real positive nuber")
}else if (age < 18) {
    console.log("You are too yuong")
}else if (age >= 18 && age <=50){
    console.log("You can drink")
}else if(age > 50 && age <=80){
    console.log("You should exercise")
}else if(age > 80){
    console.log("You can do whatever you want")
}